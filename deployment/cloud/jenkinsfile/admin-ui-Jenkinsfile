node {
 def branch = params.BRANCH_NAME
 def dockerImagesTagVersion = 'NaV'  
 def registryUrl = params.REGISTRY_URL
 def registryName = params.REGISTRY_NAME
 def registryCredentials = params.REGISTRY_CREDENTIALS
 def gitUrl = params.GIT_URL
 def gitCredentials = params.GIT_CREDENTIALS
 k8DevContext = params.K8_CLUSTER_CONTEXT
 def moduleName = params.MODULE_NAME
 def projectToBuild = 'admin-ui'

 stage('------- Checkout --------') {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    userRemoteConfigs: [
     [url: gitUrl, credentialsId: gitCredentials]
    ],
    extensions: [
     /*
     Using PathRestriction Class and adding Kernel in includedRegions so that the build will be triggered
     only if there is any change in Kernel Module
     */
     [$class: 'PathRestriction', excludedRegions: '', includedRegions: projectToBuild + '/.*'],
     //[$class: 'CloneOption', noTags: false, reference: '', shallow: true, timeout: 120, depth: 1, refspec:"+refs/heads/"+branch+":refs/remotes/origin/"+branch],
     /*
     Checkout only Kernel Module through sparse checkout class
     */
     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
      [$class: 'SparseCheckoutPath', path: '/' + projectToBuild + '/']
     ]]

    ],
   ])
 }


stage ('---------- build ---------------') {
  dir(moduleName){
			sh "npm install && npm run-script build -- --prod --base-href . --output-path=dist "
  }
}


 stage('------ Docker Images : Push & Cleanup -------') {
 dir(moduleName){
 def packageJSON = readJSON file: 'package.json'
    def packageJSONVersion = packageJSON.version
    echo packageJSONVersion
   dockerImagesTagVersion = "$packageJSONVersion"
   
   echo dockerImagesTagVersion
    updatedDockerImages = "$registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
     docker.withRegistry(registryUrl, registryCredentials) {
      def buildName = "$registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
      newApp = docker.build(buildName)
      newApp.push()
      newApp.push 'latest'
     }
     /*
     Removing local images
     */
     sh "docker rmi $registryName/$moduleName:$dockerImagesTagVersion.$BUILD_NUMBER"
    /*
     Removing all untagged images
     */
    sh "docker rmi \$(docker images | awk '/<none>/ {print \$3}') || true"
    
  }
  }


    stage('Kubernetes Deploy : QA'){
      //this stage will rollout the changes on Kubernetes Cluster
      sh "kubectl config use-context $k8DevContext"
        echo "Updating [ Service:$moduleName]"
        sh "kubectl set image deployment/$moduleName $moduleName=$updatedDockerImages"
        
      echo "Getting list of all services" 
      sh "kubectl get pods"
    }
    
	}
